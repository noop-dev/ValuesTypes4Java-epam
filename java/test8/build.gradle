/*
 * Copyright 2021 EPAM Systems, Inc
 *
 * See the NOTICE file distributed with this work for additional information
 * regarding copyright ownership. Licensed under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

apply plugin: "java"

sourceCompatibility=1.8
targetCompatibility=1.8

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral()
}

configurations.implementation.canBeResolved true
configurations.testImplementation.canBeResolved true

dependencies {
    implementation "com.epam.deltix:dfp:$dfpVersion"
    implementation project(':java:value-types')

    implementation 'com.google.code.java-allocation-instrumenter:java-allocation-instrumenter:3.1.0'
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.9.4"
    implementation group: "junit", name: "junit", version: "4.+"
}

test {
    outputs.upToDateWhen { false }
    def disableAllocationDetector = true
    def javaAllocationInstrumenterJar = configurations.testImplementation.find {it.name.startsWith('java-allocation-instrumenter')}
    def vtAgentJar = configurations.testImplementation.find {it.name.startsWith('value-types-0')}

    def valueTypeAgent = '-javaagent:' + vtAgentJar + '=' + rootDir + "/cfg/valuetype-tests.json"
    jvmArgs += valueTypeAgent

    def allocationAgent = '-javaagent:' + javaAllocationInstrumenterJar

    if(disableAllocationDetector) {
        jvmArgs += '-Ddisable.allocation.detector=true'
    } else {
        jvmArgs += allocationAgent
    }

    testLogging {
        exceptionFormat 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}